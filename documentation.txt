MLX functions:

INITIALISATION:

void *mlx_init(void);
Initializes the MiniLibX context. Must be called before anything else.

WINDOW MANAGEMENT:

void *mlx_new_window(void *mlx_ptr, int width, int height, char *title);
creates window

int mlx_destroy_window(void *mlx_ptr, void *win_ptr);
destroys window 

IMAGE MANAGEMENT:

void *mlx_new_image(void *mlx_ptr, int width, int height);
Create a blank image

void *mlx_xpm_file_to_image(void *mlx_ptr, char *filename, int *width, int *height);
Load an XPM file into an image

int mlx_put_image_to_window(void *mlx_ptr, void *win_ptr, void *img_ptr, int x, int y);
Draw an image onto the window

char *mlx_get_data_addr(void *img_ptr, int *bits_per_pixel, int *size_line, int *endian);
Access pixel buffer (optional)

INPUT & EVENTS

int mlx_key_hook(void *win_ptr, int (*f)(int keycode, void *param), void *param);
Simple key handler

int mlx_hook(void *win_ptr, int event, int mask, int (*f)(), void *param);
Advanced hook

#define X_EVENT_DESTROY_NOTIFY 17
mlx_hook(win, 17, 0, on_close, NULL);
Useful for handling window close

LOOPING:

int mlx_loop(void *mlx_ptr);
Starts the render loop. Your game lives here

MAKEFILE!!!! IMPORTANT!!!
USE FOR SWITCHING BETWEEN LINUX AND MAC

ifeq ($(shell uname), Darwin)
	MLX_DIR = ./mlx_mac
	LIBS = -framework OpenGL -framework AppKit
else
	MLX_DIR = ./mlx_linux
	LIBS = -lXext -lX11 -lm
endif

all:
	$(CC) $(SRC) -L$(MLX_DIR) -lmlx $(LIBS) -o so_long
